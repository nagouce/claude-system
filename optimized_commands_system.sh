#!/bin/bash
# Sistema de Comandos Otimizados - Claude Code Pro
# Coloque este arquivo como ~/bin/claude-pro.sh e d√™ chmod +x

# ==================================================
# FASE 1: PLANEJAMENTO DETALHADO
# ==================================================

# Comando para planejamento completo baseado no briefing
claude-plan() {
    echo "üß† Iniciando planejamento detalhado do projeto..."
    echo "üìã Cole seu briefing completo no comando abaixo:"
    
    claude chat "
# BRIEFING COMPLETO DO PROJETO
$1

# INSTRU√á√ïES PARA PLANEJAMENTO T√âCNICO DETALHADO

Analise este briefing e crie um PLANEJAMENTO T√âCNICO ULTRA-COMPLETO:

## 1. AN√ÅLISE DE VIABILIDADE
- Valide cada funcionalidade tecnicamente
- Identifique riscos e desafios potenciais
- Sugira otimiza√ß√µes baseadas nas melhores pr√°ticas
- Avalie complexidade vs valor de cada feature

## 2. ARQUITETURA DETALHADA
### Sistema Overview
- Diagrama de arquitetura em texto/ASCII
- Fluxo de dados entre componentes
- Pontos de integra√ß√£o cr√≠ticos

### Database Design
- Schema completo com relacionamentos
- √çndices recomendados para performance
- Estrat√©gia de migrations
- Backup e recovery plan

### API Design
- Endpoints completos com m√©todos HTTP
- Request/Response schemas detalhados
- Versionamento de API
- Rate limiting e caching strategy

## 3. STACK TECNOL√ìGICA JUSTIFICADA
### Frontend
- Framework recomendado com justificativa
- Bibliotecas essenciais e suas vers√µes
- Bundler e ferramentas de build
- Estrat√©gia de styling (CSS/SCSS/Tailwind)

### Backend
- Runtime/Language com justificativa
- Framework web recomendado
- ORM/Database client
- Middleware essenciais

### DevOps
- Containeriza√ß√£o (Docker)
- CI/CD pipeline detalhado
- Monitoramento e logging
- Backup strategies

## 4. DEVELOPMENT ROADMAP
### Sprint Planning (semanas)
- Sprint 1-2: Setup + Core Backend
- Sprint 3-4: Authentication + Database
- Sprint 5-6: Frontend Base + Core UI
- Sprint 7-8: Feature Implementation
- Sprint 9-10: Integration + Testing
- Sprint 11-12: Polish + Deploy

### Deliverables por Sprint
- Entreg√°veis espec√≠ficos e mensur√°veis
- Crit√©rios de aceite para cada entrega
- Dependencies between sprints

## 5. TESTING STRATEGY
### Test Pyramid
- Unit tests (target coverage %)
- Integration tests scope
- E2E tests for critical paths
- Performance testing plan

### Quality Gates
- Code quality metrics
- Performance benchmarks
- Security scanning
- Accessibility compliance

## 6. DEPLOYMENT STRATEGY
### Environments
- Development setup
- Staging environment
- Production infrastructure
- Rollback procedures

## 7. RISK MITIGATION
- Technical risks and solutions
- Timeline risks and buffers
- External dependencies risks
- Performance bottlenecks prevention

Apresente este plano de forma estruturada e detalhada para aprova√ß√£o antes da execu√ß√£o.
"
}

# ==================================================
# FASE 2: VALIDA√á√ÉO DO PLANEJAMENTO
# ==================================================

claude-validate() {
    echo "‚úÖ Iniciando valida√ß√£o do planejamento..."
    echo "üìù Cole o planejamento recebido + seus coment√°rios:"
    
    claude chat "
# PLANEJAMENTO RECEBIDO
$1

# MEUS COMENT√ÅRIOS E AJUSTES
$2

# INSTRU√á√ïES PARA REFINAMENTO

Baseado nos meus coment√°rios, refine o planejamento:

1. **INCORPORAR MUDAN√áAS**
   - Ajuste pontos que comentei
   - Mantenha coer√™ncia do projeto
   - Atualize cronograma se necess√°rio

2. **VALIDA√á√ÉO T√âCNICA**
   - Confirme que mudan√ßas s√£o vi√°veis
   - Identifique impactos nas depend√™ncias
   - Ajuste estimates de tempo se necess√°rio

3. **PLANO FINAL**
   - Apresente vers√£o final para aprova√ß√£o
   - Confirme que est√° pronto para execu√ß√£o
   - Inclua checklist de pr√©-requisitos

4. **CONFIRMATION CHECKLIST**
   - [ ] Todos os requisitos contemplados
   - [ ] Stack tecnol√≥gica aprovada
   - [ ] Cronograma realista
   - [ ] Tests strategy definida
   - [ ] Deploy plan clear
   - [ ] Ready for development

Apresente o plano refinado e confirme se posso prosseguir com a execu√ß√£o.
"
}

# ==================================================
# FASE 3: EXECU√á√ÉO COMPLETA
# ==================================================

claude-execute() {
    echo "üöÄ Iniciando execu√ß√£o completa do desenvolvimento..."
    echo "‚ö° Executando desenvolvimento baseado no plano aprovado..."
    
    claude code "
# DESENVOLVIMENTO COMPLETO - PLANO APROVADO
$1

# INSTRU√á√ïES DE EXECU√á√ÉO POR FASES

Execute o desenvolvimento seguindo estas fases sequencialmente:

## FASE 1: PROJECT SETUP üèóÔ∏è
### 1.1 Estrutura Base
- Crie estrutura de pastas conforme arquitetura
- Initialize git repository com .gitignore
- Setup package.json para frontend e backend
- Configure TypeScript configs
- Setup ESLint, Prettier, Husky hooks

### 1.2 Development Environment
- Configure Docker containers (se aplic√°vel)
- Setup database com initial schema
- Configure environment variables (.env files)
- Setup hot reload para desenvolvimento
- Configure VS Code settings/extensions recommendations

### 1.3 Testing Infrastructure
- Configure Jest/Vitest para testes
- Setup test database
- Configure coverage reporting
- Setup E2E testing framework
- Configure CI/CD pipeline b√°sico

**CHECKPOINT 1:** Projeto inicializado, testes b√°sicos rodando

---

## FASE 2: BACKEND CORE üîß
### 2.1 Database Layer
- Implement all database models/entities
- Create migration files
- Setup relationships and constraints
- Create seeders for development data
- Configure database connection pooling

### 2.2 Authentication System
- Implement JWT-based authentication
- Create user registration/login endpoints
- Add password hashing and validation
- Implement refresh token mechanism
- Add role-based authorization middleware

### 2.3 Core API Endpoints
- Implement all CRUD operations
- Add input validation and sanitization
- Create error handling middleware
- Add logging and monitoring
- Implement rate limiting

### 2.4 External Integrations
- Setup email service integration
- Configure payment processing (if needed)
- Add file upload handling
- Setup external API integrations
- Configure webhook handling

**CHECKPOINT 2:** API completa, testada, documentada

---

## FASE 3: FRONTEND FOUNDATION üé®
### 3.1 Base Setup
- Configure React/Vue with TypeScript
- Setup routing system
- Configure state management
- Setup API client with interceptors
- Configure build system and optimization

### 3.2 Design System
- Create base components (Button, Input, Modal, etc)
- Setup styling system (Tailwind/Styled-components)
- Create layout components (Header, Sidebar, Footer)
- Implement responsive design system
- Setup theme management

### 3.3 Authentication UI
- Create login/register forms
- Implement protected routes
- Add authentication state management
- Create user profile management
- Add password reset functionality

**CHECKPOINT 3:** Frontend base funcionando, autentica√ß√£o completa

---

## FASE 4: FEATURE IMPLEMENTATION üöÄ
### 4.1 Core Features (por prioridade)
Para cada feature principal:
- Implement backend endpoints
- Create frontend components
- Connect frontend to backend
- Add form validation and UX feedback
- Add loading states and error handling
- Write comprehensive tests
- Test integration end-to-end

### 4.2 Advanced Features
- Implement real-time features (WebSocket se necess√°rio)
- Add advanced search and filtering
- Create data visualization (charts/graphs)
- Add export/import functionality
- Implement batch operations

**CHECKPOINT 4:** Todas as features funcionais e testadas

---

## FASE 5: INTEGRATION & POLISH ‚ú®
### 5.1 System Integration
- Test all integrations thoroughly
- Implement comprehensive error handling
- Add proper logging throughout system
- Setup monitoring and health checks
- Optimize database queries

### 5.2 Performance Optimization
- Add caching layers (Redis se necess√°rio)
- Optimize frontend bundle size
- Implement lazy loading
- Add image optimization
- Setup CDN for static assets

### 5.3 SEO & Accessibility
- Add meta tags and OpenGraph
- Implement structured data
- Ensure WCAG accessibility compliance
- Add sitemap and robots.txt
- Setup analytics tracking

**CHECKPOINT 5:** Sistema otimizado e production-ready

---

## FASE 6: TESTING & DEPLOYMENT üß™
### 6.1 Comprehensive Testing
- Run full test suite (unit + integration + E2E)
- Verify minimum test coverage requirements
- Perform security testing
- Load testing for critical paths
- Cross-browser compatibility testing

### 6.2 Production Preparation
- Configure production environment variables
- Setup production database
- Configure SSL certificates
- Setup backup procedures
- Configure monitoring and alerting

### 6.3 Deployment
- Deploy to staging environment
- Run smoke tests in staging
- Performance testing in staging
- Deploy to production
- Monitor deployment health

**FINAL CHECKPOINT:** Aplica√ß√£o em produ√ß√£o, monitorada, funcionando

---

## EXECUTION RULES:
1. **SEMPRE** execute testes ap√≥s cada fase
2. **N√ÉO** prossiga se testes est√£o falhando
3. **REPORTE** progresso ap√≥s cada checkpoint
4. **PE√áA** valida√ß√£o antes de avan√ßar fases cr√≠ticas
5. **MANTENHA** c√≥digo limpo e bem documentado

## SUCCESS CRITERIA:
- ‚úÖ Aplica√ß√£o roda em localhost:3000
- ‚úÖ Todos os testes passando (>80% coverage)
- ‚úÖ Zero erros no console
- ‚úÖ Performance Lighthouse >90
- ‚úÖ Todas as features funcionais
- ‚úÖ Deploy bem-sucedido
- ‚úÖ Monitoring funcionando

EXECUTE FASE POR FASE, REPORTANDO PROGRESSO DETALHADO.
"
}

# ==================================================
# FASE 4: VALIDA√á√ÉO E TESTES COMPLETOS
# ==================================================

claude-test() {
    echo "üß™ Iniciando bateria completa de testes..."
    echo "üîç Validando qualidade e funcionamento..."
    
    claude code "
# VALIDA√á√ÉO COMPLETA DO PROJETO

Execute esta bateria COMPLETA de valida√ß√£o:

## 1. AUTOMATED TESTING SUITE ü§ñ
### Unit Tests
- Execute todos os unit tests
- Verifique coverage m√≠nimo 80%
- Teste edge cases e error handling
- Valide performance de fun√ß√µes cr√≠ticas
- Gere relat√≥rio detalhado de coverage

### Integration Tests
- Teste todas as rotas da API
- Valide autentica√ß√£o e autoriza√ß√£o
- Teste integra√ß√£o com banco de dados
- Valide integra√ß√£o com servi√ßos externos
- Teste fluxos de dados cr√≠ticos

### End-to-End Tests
- Teste user journeys principais
- Valide autentica√ß√£o completa
- Teste todas as funcionalidades core
- Valide formul√°rios e valida√ß√µes
- Teste responsividade em diferentes devices

**COMANDO DE TESTE:** 
\`npm test\` ou \`yarn test\`
\`npm run test:coverage\`
\`npm run test:e2e\`

## 2. MANUAL TESTING CHECKLIST üë®‚Äçüíª
### Application Startup
- [ ] Servidor inicia sem erros
- [ ] Frontend carrega em localhost:3000
- [ ] Database conex√£o funcional
- [ ] Vari√°veis de ambiente carregadas
- [ ] Logs aparecem corretamente

### Authentication Flow
- [ ] Registro de usu√°rio funciona
- [ ] Login com credenciais v√°lidas
- [ ] Login falha com credenciais inv√°lidas
- [ ] Logout funciona corretamente
- [ ] Tokens s√£o refreshados automaticamente
- [ ] Prote√ß√£o de rotas funcionando

### Core Functionality
Para CADA feature principal:
- [ ] Create operations funcionam
- [ ] Read operations retornam dados corretos
- [ ] Update operations persistem mudan√ßas
- [ ] Delete operations removem dados
- [ ] Valida√ß√µes impedem dados inv√°lidos
- [ ] Error handling mostra mensagens adequadas

### User Experience
- [ ] Interface responsiva em mobile
- [ ] Interface responsiva em tablet
- [ ] Interface responsiva em desktop
- [ ] Loading states aparecem adequadamente
- [ ] Success/Error messages s√£o claros
- [ ] Navega√ß√£o intuitiva e funcional

## 3. PERFORMANCE TESTING üìä
### Frontend Performance
- Execute Lighthouse audit
- Target: Performance >90, Accessibility >95
- Verifique First Contentful Paint <2s
- Teste Cumulative Layout Shift <0.1
- Valide bundle size otimizado

### Backend Performance
- Teste response time <200ms para endpoints cr√≠ticos
- Valide database query performance
- Teste concurrent requests (10+ usuarios simult√¢neos)
- Verifique memory usage em load
- Teste rate limiting funcionando

### Database Performance
- Verifique query execution time
- Valide √≠ndices est√£o otimizados
- Teste com dataset grande (1000+ records)
- Verifique backup/restore procedures

## 4. SECURITY TESTING üîí
### Input Validation
- [ ] SQL Injection prevention
- [ ] XSS protection funcionando
- [ ] CSRF protection ativo
- [ ] File upload restrictions
- [ ] Input sanitization working

### Authentication Security
- [ ] Passwords s√£o hasheados
- [ ] Tokens t√™m expiration adequada
- [ ] Sessions s√£o invalidadas no logout
- [ ] Rate limiting em endpoints de auth
- [ ] 2FA funcionando (se implementado)

### API Security
- [ ] CORS configurado corretamente
- [ ] HTTPS enforced (produ√ß√£o)
- [ ] API rate limiting ativo
- [ ] Sensitive data n√£o exposta em logs
- [ ] Error messages n√£o vazam informa√ß√µes

## 5. INTEGRATION TESTING üîó
### External Services
- [ ] Email service envia emails
- [ ] Payment processing funciona (se aplic√°vel)
- [ ] File upload/storage funciona
- [ ] Third-party APIs respondem
- [ ] Webhooks s√£o recebidos/processados

### Database Integration
- [ ] Migrations rodam sem erro
- [ ] Seeds populam dados corretamente
- [ ] Relationships funcionam
- [ ] Constraints s√£o respeitadas
- [ ] Transactions funcionam adequadamente

## 6. DEPLOYMENT VALIDATION üöÄ
### Local Environment
- [ ] \`npm run dev\` inicia sem erros
- [ ] Hot reload funciona
- [ ] Environment variables carregadas
- [ ] Database seeds aplicadas
- [ ] Todas as features funcionais localmente

### Build Process
- [ ] \`npm run build\` executa sem erros
- [ ] Build produz arquivos otimizados
- [ ] Bundle size dentro do esperado
- [ ] No unused dependencies
- [ ] Source maps configurados adequadamente

### Production Readiness
- [ ] Environment variables para produ√ß√£o
- [ ] Database migration scripts prontos
- [ ] SSL certificates configurados
- [ ] Error monitoring setup
- [ ] Logging configurado adequadamente

## 7. CODE QUALITY ASSESSMENT üìã
### Code Standards
- [ ] ESLint passa sem warnings
- [ ] Prettier formata√ß√£o consistente
- [ ] TypeScript sem erros de type
- [ ] No console.log em produ√ß√£o
- [ ] Consistent naming conventions

### Documentation
- [ ] README.md completo e atualizado
- [ ] API documentation gerada
- [ ] Environment setup instructions
- [ ] Deployment procedures documented
- [ ] Code comments em fun√ß√µes complexas

## 8. FINAL VALIDATION REPORT üìä

Gere um relat√≥rio final com:

### Test Results Summary
- ‚úÖ/‚ùå Unit Tests: X/Y passing (coverage: X%)
- ‚úÖ/‚ùå Integration Tests: X/Y passing
- ‚úÖ/‚ùå E2E Tests: X/Y passing
- ‚úÖ/‚ùå Performance: Lighthouse score X/100
- ‚úÖ/‚ùå Security: All checks passed
- ‚úÖ/‚ùå Manual Testing: X/Y items validated

### Performance Metrics
- Page Load Time: Xs
- API Response Time: Xms
- Bundle Size: XMB
- Database Query Time: Xms
- Memory Usage: XMB

### Issues Found & Fixed
- List any bugs encontrados
- Actions taken para corre√ß√£o
- Performance optimizations aplicadas
- Security improvements implementadas

### Production Readiness Checklist
- [ ] All tests passing
- [ ] Performance targets met
- [ ] Security validations passed
- [ ] Documentation complete
- [ ] Deployment procedures tested
- [ ] Monitoring configured
- [ ] Error handling comprehensive

## 9. FINAL DECISION POINT üéØ

Com base nos resultados:

**SE TODOS OS TESTES PASSARAM:**
- Proceda para commit final
- Crie tag de release (v1.0.0)
- Execute deploy para staging/produ√ß√£o
- Ative monitoramento
- Notifique stakeholders

**SE ALGUM TESTE FALHOU:**
- Liste issues cr√≠ticos
- Priorize corre√ß√µes necess√°rias
- Re-execute testes ap√≥s corre√ß√µes
- N√£o proceda para produ√ß√£o at√© 100% dos testes cr√≠ticos passarem

EXECUTE ESTA VALIDA√á√ÉO COMPLETA E REPORTE RESULTADOS DETALHADOS.
"
}

# ==================================================
# FASE 5: COMMIT E DEPLOY FINAL
# ==================================================

claude-deploy() {
    echo "üì¶ Iniciando processo de commit e deploy final..."
    echo "üöÄ Preparando para produ√ß√£o..."
    
    claude code "
# COMMIT FINAL E DEPLOY

## PR√â-REQUISITOS OBRIGAT√ìRIOS
Antes de executar, confirme que:
- ‚úÖ TODOS os testes est√£o passando
- ‚úÖ Aplica√ß√£o roda perfeitamente em localhost:3000
- ‚úÖ Valida√ß√£o completa foi executada com sucesso
- ‚úÖ Performance est√° dentro dos targets
- ‚úÖ Security checks passaram

## FASE 1: PREPARA√á√ÉO PARA COMMIT üìù

### 1.1 Code Cleanup
- Remove todos os console.log e debug code
- Remove arquivos tempor√°rios e caches
- Limpa imports n√£o utilizados
- Verifica se .gitignore est√° adequado
- Executa linter final (ESLint + Prettier)

### 1.2 Documentation Update
- Atualiza README.md com:
  * Descri√ß√£o completa do projeto
  * Instru√ß√µes de instala√ß√£o
  * Instru√ß√µes de uso
  * API documentation links
  * Environment variables necess√°rias
  * Scripts dispon√≠veis
  * Troubleshooting guide

### 1.3 Version Management
- Atualiza version no package.json
- Cria CHANGELOG.md com features implementadas
- Prepara release notes

## FASE 2: GIT OPERATIONS üìÇ

### 2.1 Git Status Check
\`\`\`bash
git status
git add .
git status  # Confirma que apenas arquivos corretos foram adicionados
\`\`\`

### 2.2 Pre-commit Validation
- Execute uma √∫ltima bateria de testes
- Verifique que build production funciona
- Confirme que aplica√ß√£o inicia corretamente
- Execute lint e type check

### 2.3 Commit with Semantic Versioning
\`\`\`bash
git commit -m \"feat: initial release v1.0.0

‚ú® Features implemented:
- [Lista todas as features principais]
- Authentication system with JWT
- Responsive UI with modern design
- API with full CRUD operations
- Comprehensive testing suite
- Production-ready deployment setup

üß™ Testing:
- Unit tests coverage: >80%
- Integration tests: All passing  
- E2E tests: Critical paths covered
- Performance: Lighthouse >90
- Security: All validations passed

üì¶ Technical Stack:
- Frontend: [Stack usado]
- Backend: [Stack usado]  
- Database: [Database usado]
- Testing: [Frameworks de teste]
- Deploy: [Plataforma de deploy]\"
\`\`\`

### 2.4 Tagging
\`\`\`bash
git tag -a v1.0.0 -m \"Release v1.0.0 - Initial production release\"
git push origin main
git push origin v1.0.0
\`\`\`

## FASE 3: DEPLOYMENT PREPARATION üöÄ

### 3.1 Environment Configuration
- Configure production environment variables
- Setup production database (with migrations)
- Configure SSL certificates
- Setup domain DNS records
- Configure CDN (se aplic√°vel)

### 3.2 Build Production Version
\`\`\`bash
npm run build  # ou yarn build
# Verifique que build foi criado sem erros
# Teste build localmente antes de deploy
\`\`\`

### 3.3 Database Setup
\`\`\`bash
# Execute migrations em produ√ß√£o
npm run migrate:prod
# Execute seeds se necess√°rio
npm run seed:prod
\`\`\`

## FASE 4: DEPLOYMENT EXECUTION üì°

### 4.1 Deploy to Staging
- Deploy aplica√ß√£o para ambiente de staging
- Execute smoke tests em staging
- Valide que todas as integrations funcionam
- Teste performance em staging

### 4.2 Production Deployment
Escolha sua plataforma de deploy:

**Para Vercel:**
\`\`\`bash
vercel --prod
\`\`\`

**Para Netlify:**
\`\`\`bash
netlify deploy --prod
\`\`\`

**Para Railway:**
\`\`\`bash
railway deploy
\`\`\`

**Para AWS/DigitalOcean:**
- Execute scripts de deploy configurados
- Configure load balancers se necess√°rio
- Setup auto-scaling se aplic√°vel

### 4.3 Post-Deploy Validation
Imediatamente ap√≥s deploy:
- ‚úÖ Aplica√ß√£o carrega sem erros
- ‚úÖ Health check endpoint responde
- ‚úÖ Database conex√£o funcional
- ‚úÖ Authentication funciona
- ‚úÖ Core features operacionais
- ‚úÖ SSL certificate v√°lido
- ‚úÖ Performance dentro do esperado

## FASE 5: MONITORING & MAINTENANCE üìä

### 5.1 Setup Monitoring
- Configure error tracking (Sentry)
- Setup uptime monitoring (Pingdom)
- Configure performance monitoring
- Setup log aggregation
- Configure alerting para issues cr√≠ticos

### 5.2 Backup Procedures  
- Configure automated database backups
- Test backup restoration procedures
- Document emergency procedures
- Setup monitoring para backup success

### 5.3 Documentation Final
Crie documenta√ß√£o para:
- **Admin Guide:** Como gerenciar a aplica√ß√£o
- **API Documentation:** Endpoints e usage
- **Troubleshooting:** Common issues e solutions
- **Deployment Guide:** Como fazer updates futuros
- **Monitoring Guide:** Como interpretar m√©tricas

## FASE 6: SUCCESS CELEBRATION! üéâ

### 6.1 Final Checklist
- ‚úÖ C√≥digo commitado no GitHub com tag
- ‚úÖ Aplica√ß√£o deployada e funcionando
- ‚úÖ Monitoring ativo e funcionando
- ‚úÖ Backups configurados e testados
- ‚úÖ Documentation completa
- ‚úÖ Performance targets atingidos
- ‚úÖ Security validations passadas
- ‚úÖ All stakeholders notificados

### 6.2 Project Summary
Gere um resumo final com:
- **Project Overview:** O que foi constru√≠do
- **Technical Achievements:** Tecnologias dominadas
- **Performance Metrics:** N√∫meros alcan√ßados  
- **Timeline:** Tempo real vs estimado
- **Lessons Learned:** Key insights
- **Next Steps:** Roadmap futuro

### 6.3 Repository Final State
Seu reposit√≥rio deve ter:
- Clean, organized code structure
- Comprehensive README.md
- Complete test suite
- Production deployment configs
- Documentation folder
- Tagged releases
- CI/CD pipeline functional

## EXECUTION COMMAND:
Execute este processo step-by-step, reportando sucesso de cada fase antes de prosseguir para a pr√≥xima.

**ONLY PROCEED IF ALL VALIDATIONS PASSED IN PREVIOUS TESTING PHASE**
"
}

# ==================================================
# COMANDOS AUXILIARES E UTILIT√ÅRIOS
# ==================================================

# Comando para status geral do projeto
claude-status() {
    echo "üìä Verificando status geral do projeto..."
    
    claude code "
# PROJECT STATUS CHECK

Execute uma verifica√ß√£o r√°pida de status:

## QUICK HEALTH CHECK
1. **Dependencies:**
   - Verifique se node_modules est√° atualizado
   - Check for security vulnerabilities
   - Verify all dependencies s√£o utilizadas

2. **Build Status:**
   - Execute build para verificar se compila
   - Check for TypeScript errors
   - Verify linting passes

3. **Test Status:**
   - Quick test run para verificar se testes passam
   - Check test coverage atual
   - Identify any broken tests

4. **Development Server:**
   - Inicie servidor de desenvolvimento
   - Verify localhost:3000 loads correctly
   - Check for console errors

5. **Git Status:**
   - Check uncommitted changes
   - Verify branch status
   - Check if any files need to be committed

Report current project status with recommendations for next steps.
"
}

# Comando para help/documenta√ß√£o
claude-help() {
    echo "üìö CLAUDE CODE PRO - COMMAND REFERENCE"
    echo "=============================================="
    echo ""
    echo "üîß MAIN COMMANDS:"
    echo "  claude-plan [briefing]     ‚Üí Gera planejamento detalhado"
    echo "  claude-validate [plan]     ‚Üí Valida e refina planejamento"  
    echo "  claude-execute [plan]      ‚Üí Executa desenvolvimento completo"
    echo "  claude-test                ‚Üí Executa bateria completa de testes"
    echo "  claude-deploy              ‚Üí Commit final e deploy"
    echo ""
    echo "üõ†Ô∏è  UTILITY COMMANDS:"
    echo "  claude-status              ‚Üí Verifica status atual do projeto"
    echo "  claude-help                ‚Üí Mostra esta ajuda"
    echo ""
    echo "üìã WORKFLOW COMPLETO:"
    echo "  1. Prepare briefing ultra-detalhado"
    echo "  2. claude-plan [briefing] ‚Üí Receba planejamento"
    echo "  3. claude-validate ‚Üí Ajuste planejamento"
    echo "  4. claude-execute ‚Üí Execute desenvolvimento"
    echo "  5. claude-test ‚Üí Valide qualidade completa"
    echo "  6. claude-deploy ‚Üí Commit e deploy final"
    echo ""
    echo "üí° TIPS:"
    echo "  - Sempre execute claude-status antes de come√ßar"
    echo "  - Use briefings ultra-detalhados para melhores resultados"
    echo "  - Valide CADA fase antes de prosseguir"
    echo "  - Mantenha backups regulares do c√≥digo"
    echo ""
    echo "üéØ SUCCESS METRICS:"
    echo "  - Todos os testes passando (>80% coverage)"
    echo "  - Performance Lighthouse >90"
    echo "  - Zero erros em produ√ß√£o"  
    echo "  - Aplica√ß√£o rodando em localhost:3000"
    echo ""
}

# Adicionar ao ~/.bashrc ou ~/.zshrc para carregar automaticamente
echo "üöÄ Claude Code Pro Commands loaded!"
echo "üìö Run 'claude-help' para ver todos os comandos dispon√≠veis"